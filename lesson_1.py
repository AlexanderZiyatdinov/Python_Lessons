""" Функция print() позволяет что-то печатать на экран.
Принимает функция следующие параметры: объекты на печать, sep= - разделитель,
end= -окончание печати и другие. По умолчанию sep=' ', end='\n' """

print("Hello world")
print("Hello", "world")
print("Hello", "world", sep=',')  # Указали sep=','

print('word1', end=' ')  # Указали end=' ', поэтому следующая строка
print('word2')  # напечатается через пробел, а не на след. строке :)

string = "Python"  # Объявили переменную типа STR равную "Python"

""" До этого момента мы работали со строками - это такой объект в Python
 (Чтобы узнать ТИП объекта, можно написать print(type(object)) )
 Помимо строк есть еще типы, например - числовые: целые - int, дробные - float
 Но мы начнем работу с целыми"""

"""В python существует множество различных арифметических операций"""

a = 2  # Объявили переменную типа INT равную 2
b = 2
c = a + b  # Переменную можно "делать" из переменных

print(c)

print(a + b)  # Сумма

print(a - b)  # Разность

print(a * b)  # Умножение

print(a / b)  # Деление

print(2 ** 5)  # Возведение в степень

print(5 % 2)  # Взятие остатка от деления

print(5 // 2)  # Целочисленное деление

print(2 * 3 ** 2)  # Python сам расставит приоритет в действиях!

"""Чтобы считать строку используют команду input(), а чтобы считать число
используют ту же самую команду, правда ее оборачивают в int(), чтобы мы
поняли, что работаем с числом"""

"""Решим следующую задачку:
# Даны два числа a и b - это катеты прям. треугольника. Надо найти гипотенузу"""

a = int(input())
b = int(input())

c = (a ** 2 + b ** 2) ** (0.5)  # Вместо корня используем степень 1/2
# Чтобы использовать корень sqrt необходимо сделать import math

print(c)

"""Посмотрим, что будет если мы напечатаем 5>3"""
print(5 > 3)  # Напечатло True
"""В Python есть булевый тип переменных - BOOL, который принмает True или False
Для работы с логическим(булевым) типом данных мы используем след. операции:
NOT OR AND соответственно логические отрицание, дизъюнкция и конъюнкция
https://www.youtube.com/watch?v=IF7Blq2TT6s - наглядный пример"""

print(5 > 3)  # Больше

print(5 >= 3)  # Больше либо равно

print(3 < 5)  # Меньше

print(3 <= 5)  # Меньше либо равно

print(5 == 5)  # Равно

print(5 != 6)  # Неравно

"""Тепрь мы можем попытаться соствить логические инструкции.
Это делается так:

if условие:
    код
else:
    код

ВНИМАНИЕ - ОТСТУПЫ ВАЖНЫ (обычно 4 пробела)"""

if (4 >= 4) and (0 != 1):
    print("Все правда")

if 5 > 6:
    print("YES")
else:
    print("NO")

if "Екат" in "Екатеринбург":  # проверили есть ли подстрока "Екат" в слове
    print("Да")

"""Вернемся к строкам. Строки стоит представлять как коллекции символов, 
при это каждый отдельный символ - то же есть строка. Тогда мы можем
обратиться к элементу (символу) в строке. Это делается так:"""

string = "Hello world"
print(string[0])  # Напечатали первый (нулевой) символ строки -- "H"

"""Более подробно про строки можно почитать тут:
https://pythonworld.ru/tipy-dannyx-v-python/stroki-funkcii-i-metody-strok.html"""

"""Раз есть коллекции символов, то есть ли коллекции чисел? Да, есть!
Это списки, и по сути, это коллекции чего угодно. Создаются они так:
A = [5,3,6,True,'Hello', 3.14] 
В них мы можем что-то добавить с помощью функции append(x)"""

A = [5, 3, 6, True, 'Hello', 3.14]
A.append(56)

print(A)

"""На самом деле мы даже можем создать список списков, 
но тогда и обращаться к нему будем через двойной индекс"""

A = [1, [2, 3]]
print(A[1][1])  # Выведет 3

"""А как же нам удобно работать с коллекциями - ответ прост:
Для этого нам понадобится цикл for. Он устроен так:

for имя_переменной in итерируемая_коллекция:
    код
    
Чтобы создать произвольную числовую коллекцию используют функцию - 
range(start, stop, step) - она создает коллекцию чисел от start до stop-1 !!!    
"""

for i in range(1, 100, 2):
    print(i)

for char in "Hello":
    print(Hello)

B = [1, 2, True]

for element in B:
    print(element)

"""Для того, чтобы сгенерировать случайные числа используют 
библиотеку random. Пишут так: n = random.randint(0,100) - например тут мы
генерируем псевдо-случайное число от 0 до 100"""

"""Давайте решим задачу на поиск максимума и минимума в массиве из
случайных элементов от 1 до 100"""

import random

A = []

for i in range(10):
    A.append(random.randint(1,100))
print(A)

max = -1

for i in range(10):
    if A[i] > max:
        max = A[i]
print(max)

min = 1000

for i in range(10):
    if A[i] < min:
        min = A[i]
print(min)

"""На этом пока всё, впереди ждет еще много нового!"""
